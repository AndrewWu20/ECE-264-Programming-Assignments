        -:    0:Source:bit_writer.c
        -:    0:Programs:4
        -:    1:#include <assert.h>
        -:    2:#include "bit_writer.h"
        -:    3:
        5:    4:BitWriter open_bit_writer(const char* path) {
        5:    5:	return(BitWriter) { .file = fopen(path, "w"), .current_byte = 0, .num_bits_left = 8};		//Declarations of variables in a compound literal 
        -:    6:}
        -:    7:
       59:    8:void write_bits(BitWriter* a_writer, uint8_t bits, uint8_t num_bits_to_write) {
      59*:    9:	assert(num_bits_to_write >= 0 && num_bits_to_write <= 8);
      59*:   10:	assert(a_writer->num_bits_left >= 1 && a_writer->num_bits_left <= 8);
        -:   11:
       59:   12:	if(num_bits_to_write <= a_writer -> num_bits_left) {										//If the number of bits left can fit in the byte, write the remaining bits to the same byte
       46:   13:		uint8_t write_bits = (bits << ((a_writer -> num_bits_left) - num_bits_to_write)) & (0xFF >> (8 - (a_writer -> num_bits_left)));
       46:   14:		(a_writer -> current_byte) |= write_bits;
       46:   15:		(a_writer -> num_bits_left) -= num_bits_to_write;
        -:   16:	}
        -:   17:	else {																						//Else (aka straddling), straddle the remaining bits into the next byte
       13:   18:		int old_number_bits_left = num_bits_to_write - (a_writer -> num_bits_left); // Store current number of bits open so we know how many to add later
        -:   19:
       13:   20:		uint8_t write_bits = (bits >> old_number_bits_left) & (0xFF >> (8 - (a_writer -> num_bits_left))); // Move wanted bits then remove others
        -:   21:		
       13:   22:		(a_writer -> current_byte) |= write_bits;
        -:   23:		
       13:   24:		flush_bit_writer(a_writer);
        -:   25:		
       13:   26:		(a_writer -> current_byte) |= bits << (8 - old_number_bits_left);
       13:   27:		(a_writer -> num_bits_left) -= old_number_bits_left;
        -:   28:	}
       59:   29:	if(a_writer -> num_bits_left == 0) {
        4:   30:		flush_bit_writer(a_writer);
        -:   31:	}
        -:   32:
      59*:   33:	assert(a_writer->num_bits_left >= 1 && a_writer->num_bits_left <= 8);
       59:   34:}
        -:   35:
       22:   36:void flush_bit_writer(BitWriter* a_writer) {
       22:   37:	if (a_writer -> num_bits_left != 8) {														//Writes the bits into the byte
       22:   38:		fputc(a_writer -> current_byte, (a_writer -> file));
       22:   39:		a_writer -> current_byte = 0;
       22:   40:		a_writer -> num_bits_left = 8;
        -:   41:	}
       22:   42:}
        -:   43:
        5:   44:void close_bit_writer(BitWriter* a_writer) {													//Closing the bit writer function
        5:   45:	flush_bit_writer(a_writer);
        5:   46:	fclose(a_writer -> file);
        5:   47:	a_writer -> file = NULL;
        5:   48:}
        -:   49:
        -:   50:#define __BIT_WRITER_C_V1__
        -:   51:/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab colorcolumn=96: */
